🏗️ RAG APPLICATION ARCHITECTURE
=====================================

┌─────────────────────────────────────────────────────────────────┐
│                    🖥️ FRONTEND LAYER                            │
├─────────────────────────────────────────────────────────────────┤
│  React UI (Port 3000)     │     Admin Interface                │
│  - Chat Interface         │     - Document Upload              │
│  - 3-Position Switcher    │     - Data Source Management       │
│  - Conversation History   │     - Statistics Dashboard         │
└─────────────────┬───────────────────────────────────────────────┘
                  │ HTTP Requests
                  ▼
┌─────────────────────────────────────────────────────────────────┐
│                    🌐 API LAYER                                 │
├─────────────────────────────────────────────────────────────────┤
│              Django REST API (Port 8000)                       │
│  - /api/conversations/     - /api/data-sources/                │
│  - /api/rag-stats/         - /api/feedback/                    │
└─────────────────┬───────────────────────────────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────────────────────────────┐
│                  🧠 APPLICATION LAYER                           │
├─────────────────────────────────────────────────────────────────┤
│  Django Views          │  RAG Service          │  LLM Service   │
│  - Request Handling    │  - LangChain          │  - GitHub AI   │
│  - Response Formatting │  - Vector Retrieval   │  - Response    │
│  - Data Validation     │  - Context Building   │    Generation  │
└─────────────────┬───────────────┬───────────────────────────────┘
                  │               │
                  ▼               ▼
┌─────────────────────────────────────────────────────────────────┐
│                  ⚙️ PROCESSING LAYER                            │
├─────────────────────────────────────────────────────────────────┤
│  Celery Worker          │  Redis Queue                         │
│  - Async Tasks          │  - Task Broker                       │
│  - Document Processing  │  - Message Queue                     │
│  - Background Jobs      │  - Result Backend                    │
└─────────────────┬───────────────────────────────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────────────────────────────┐
│                    💾 DATA LAYER                                │
├─────────────────────────────────────────────────────────────────┤
│  SQLite Database        │  ChromaDB            │  File Storage  │
│  - Conversations        │  - Vector Database   │  - PDF Files   │
│  - Messages             │  - Document Chunks   │  - Media Files │
│  - User Feedback        │  - Embeddings        │  - Temp Files  │
│  - Data Sources         │  - Similarity Search │                │
└─────────────────────────────────────────────────────────────────┘
                  │
                  ▼
┌─────────────────────────────────────────────────────────────────┐
│                  ☁️ EXTERNAL SERVICES                           │
├─────────────────────────────────────────────────────────────────┤
│  GitHub AI              │  Sentence Transformers               │
│  - LLM Provider         │  - Embedding Model                   │
│  - GPT-4 Integration    │  - all-MiniLM-L6-v2                  │
│  - Response Generation  │  - Vector Conversion                 │
└─────────────────────────────────────────────────────────────────┘

🔄 DATA FLOW:
=============
1. User → React UI → Django API
2. API → Views → RAG/LLM Services
3. RAG → ChromaDB + Embeddings
4. Celery → File Processing → Vector Storage
5. LLM → GitHub AI → Response
6. Response → API → UI → User

🎯 KEY FEATURES:
================
• 3-Position Data Switcher (Internal/Both/Public)
• Async Document Processing with Celery
• Vector-based RAG with ChromaDB
• Real-time Chat Interface
• Admin Panel for Document Management
• Background Color Changes per Mode
• Conversation History & Feedback System

